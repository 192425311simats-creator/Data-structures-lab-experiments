#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10
int stack[MAX_SIZE];
int top = -1;
int isFull() 
{
    return top == MAX_SIZE - 1;
}
int isEmpty() {
    return top == -1;
}
void push(int data) {
    if (isFull()) {
        printf("Stack Overflow! Cannot push element.\n");
    } else {
        stack[++top] = data;
        printf("%d pushed to stack.\n", data);
    }
}
int pop() 
{
    if (isEmpty()) {
        printf("Stack Underflow! Cannot pop element.\n");
        return -1; 
    } else {
        return stack[top--];
    }
}
int peek() {
    if (isEmpty()) 
{
        printf("Stack is empty.\n");
        return -1; 
    } else {
        return stack[top];
    }
}
void display()
{
    if (isEmpty()) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements: ");
        for (int i = 0; i <= top; i++) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice, data;

    while (1) {
        printf("\n--- Stack Operations ---\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to push: ");
                scanf("%d", &data);
                push(data);
                break;
            case 2:
                data = pop();
                if (data != -1) {
                    printf("Popped element: %d\n", data);
                }
                break;
            case 3:
                data = peek();
                if (data != -1) {
                    printf("Top element: %d\n", data);
                }
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
