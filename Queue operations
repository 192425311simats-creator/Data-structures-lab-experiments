#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10
int queue[MAX_SIZE];
int front = -1;
int rear = -1;
int isFull() {
    return (rear == MAX_SIZE - 1);
}
int isEmpty() {
    return (front == -1 || front > rear);
}
void enqueue(int data) {
    if (isFull()) {
        printf("Queue is full! Cannot enqueue.\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        queue[rear] = data;
        printf("%d enqueued to queue.\n", data);
    }
}
int dequeue() {
    int data;
    if (isEmpty()) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1; 
    } else {
        data = queue[front];
        front++;
        printf("%d dequeued from queue.\n", data);
        if (front > rear) {
            front = rear = -1;
        }
        return data;
    }
}
void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice, data;

    while (1) {
        printf("\n--- Queue Operations ---\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
